TODO 

Long Term
 - parse all type declarations
 - store type decs and file names (db?)
 - use better types unstead of strings
 - calc approximation of type usage? string matching?
 - calc available included types per file
 - use types to parse function declarations


Short Term
 - (done)fix forward declaration error
 - keep track of scope/namespace
 - refactor with new types
 - move notes into relevent files?


do i need to recognise type to tell if something is a function declaration? AA BB(CC);

testing ideas
 - could check if every word is accounted for


check for function:
[type] [optional namespace ::] [name] [(] [variable dec list] [)] [ { or ; ]


check for variable declaration:
type name;
type name([name, ..]);
type name1,name2,name3;
type name = name or value;

method parameters have only uninitialised variable declarations
(type name)
(type name, type name, ..)
(type)
(type, type, type name, ..)

so we have:
methodDec = [(] [type] [optional name] [ , or ) ] [optional methodDec]

Keeping track of Scope:

what scope to keep track of? namespaces(named and empty)
do we need function scope? do we care about types declared inside methods?
 can they effect dependencies?

should each statement know its context? have a special type?
Or have a context object that's passed through? 


Types of Context
 - namespace
 - class public/protected/private (default private)
 - struct public/protected/private (default public)
 - enum


New Types:
 - Token
 - Statement

Statement
 - list of tokens
 - context

something like:

type Token = String

data Visibility = Public | Protected | Private

data Context = Namespace { name :: Token }
             | Class { name :: Token, visibility :: Visibility }
	     | Struct { name :: Token, visibility :: Visibility }
	     | Enum { name :: Token } deriving (Show, Eq)

data Statement = Statement { tokens :: [Token], context :: [Context] } deriving (Show, Eq)


changing context:
begins with

class and {, 
namespace and {, 
struct and {, 
visibility and :
